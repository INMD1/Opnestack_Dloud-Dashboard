/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Login & get user profile.
         */
        post: operations["login_api_v1_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sso
         * @description SSO configuration.
         */
        get: operations["get_sso_api_v1_sso_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/websso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Websso
         * @description Websso
         */
        post: operations["websso_api_v1_websso_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile
         * @description Get user profile.
         */
        get: operations["get_profile_api_v1_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Log out.
         */
        post: operations["logout_api_v1_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/switch_project/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Switch Project
         * @description Switch project.
         */
        post: operations["switch_project_api_v1_switch_project__project_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Servers
         * @description List Servers
         */
        get: operations["list_servers_api_v1_extension_servers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/recycle_servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Recycle Servers
         * @description List Recycle Servers
         */
        get: operations["list_recycle_servers_api_v1_extension_recycle_servers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/volumes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Volumes
         * @description List Volumes
         */
        get: operations["list_volumes_api_v1_extension_volumes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/volume_snapshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Volume Snapshots
         * @description List Volume Snapshots.
         */
        get: operations["list_volume_snapshots_api_v1_extension_volume_snapshots_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/ports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Ports
         * @description List Ports.
         */
        get: operations["list_ports_api_v1_extension_ports_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/extension/compute-services": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Compute Services
         * @description List compute services
         */
        get: operations["compute_services_api_v1_extension_compute_services_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus Query
         * @description Prometheus query API.
         */
        get: operations["prometheus_query_api_v1_query_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/query_range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus Query Range
         * @description Prometheus query_range API.
         */
        get: operations["prometheus_query_range_api_v1_query_range_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contrib/keystone_endpoints": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Keystone Endpoints
         * @description List Keystone Endpoints
         */
        get: operations["list_keystone_endpoints_api_v1_contrib_keystone_endpoints_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contrib/domains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Domains
         * @description List Domains
         */
        get: operations["list_domains_api_v1_contrib_domains_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/contrib/regions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Regions
         * @description List Regions
         */
        get: operations["list_regions_api_v1_contrib_regions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/policies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Policies
         * @description List policies and permissions
         */
        get: operations["list_policies_api_v1_policies_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/policies/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Policies
         * @description Check policies permissions
         */
        post: operations["check_policies_api_v1_policies_check_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/setting/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show Setting
         * @description Get a setting item.
         */
        get: operations["show_setting_api_v1_setting__key__get"];
        put?: never;
        post?: never;
        /**
         * Reset Setting
         * @description Reset a setting item to default
         */
        delete: operations["reset_setting_api_v1_setting__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/setting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Setting
         * @description Update a setting item.
         */
        put: operations["update_setting_api_v1_setting_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Settings
         * @description Get all settings.
         */
        get: operations["list_settings_api_v1_settings_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup */
        post: operations["signup_api_v1_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/portforward": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Portforward */
        post: operations["portforward_api_v1_portforward_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Instance */
        post: operations["create_instance_api_v1_instances_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/port_forwardings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add Port Forwarding */
        post: operations["add_port_forwarding_api_v1_port_forwardings_post"];
        /** Delete Port Forwarding */
        delete: operations["delete_port_forwarding_api_v1_port_forwardings_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instances/{instance_id}/console": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Instance Console */
        post: operations["get_instance_console_api_v1_instances__instance_id__console_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Images */
        get: operations["list_images_api_v1_images_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/flavors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Flavors */
        get: operations["list_flavors_api_v1_flavors_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/flavors/{flavor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a Flavor */
        get: operations["get_flavor_api_v1_flavors__flavor_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/keypairs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Keypairs */
        get: operations["list_keypairs_api_v1_keypairs_get"];
        put?: never;
        /** Create a Keypair */
        post: operations["create_keypair_api_v1_keypairs_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/keypairs/{keypair_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a Keypair */
        get: operations["get_keypair_api_v1_keypairs__keypair_name__get"];
        put?: never;
        post?: never;
        /** Delete a Keypair */
        delete: operations["delete_keypair_api_v1_keypairs__keypair_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/limits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Limit Summary */
        get: operations["get_limit_summary_api_v1_limits_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/instances/{instance_id}/performance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Instance Performance */
        get: operations["get_instance_performance_api_v1_instances__instance_id__performance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BadRequestMessage */
        BadRequestMessage: {
            /**
             * Detail
             * @description Detail message
             */
            detail: string;
        };
        /** Body_websso_api_v1_websso_post */
        Body_websso_api_v1_websso_post: {
            /** Token */
            token: string;
        };
        /** ComputeServicesResponse */
        ComputeServicesResponse: {
            /**
             * Services
             * @description Services list
             */
            services: components["schemas"]["ComputeServicesResponseBase"][];
        };
        /** ComputeServicesResponseBase */
        ComputeServicesResponseBase: {
            /**
             * Id
             * @description Service id
             */
            id?: string | null;
            /**
             * Binary
             * @description Service binary
             */
            binary: string;
            /**
             * Disabled Reason
             * @description Disabled reason
             */
            disabled_reason?: string | null;
            /**
             * Host
             * @description Host name
             */
            host: string;
            /**
             * State
             * @description Service state
             */
            state?: string | null;
            /**
             * Status
             * @description Service status
             */
            status: string;
            /**
             * Updated At
             * @description Updated at
             */
            updated_at?: string | null;
            /**
             * Forced Down
             * @description Forced down
             */
            forced_down?: boolean | null;
            /**
             * Zone
             * @description Zone
             */
            zone?: string | null;
        };
        /** Console */
        Console: {
            /** Url */
            url: string;
            /** Type */
            type: string;
        };
        /** ConsoleRequest */
        ConsoleRequest: {
            /** Console Type */
            console_type: string;
        };
        /**
         * Credential
         * @example {
         *       "domain": "default",
         *       "password": "admin",
         *       "region": "RegionOne",
         *       "username": "admin"
         *     }
         */
        Credential: {
            /**
             * Region
             * @description Credential identity service region
             */
            region?: string | null;
            /**
             * Domain
             * @description Credential user domain
             */
            domain: string;
            /**
             * Username
             * @description Credential username
             */
            username: string;
            /**
             * Password
             * @description Credential password for user
             */
            password: string;
        };
        /** Domain */
        Domain: {
            /**
             * Id
             * @description Domain ID
             */
            id: string;
            /**
             * Name
             * @description Domain name
             */
            name: string;
        };
        /** Flavor */
        Flavor: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Vcpus */
            vcpus: number;
            /** Ram */
            ram: number;
            /** Disk */
            disk: number;
            /** Is Public */
            is_public: boolean;
            /** Extra Specs */
            extra_specs: {
                [key: string]: unknown;
            };
        };
        /** FlavorInServer */
        FlavorInServer: {
            /**
             * Ephemeral
             * @description Ephemeral disk size in GB
             */
            ephemeral?: number | null;
            /**
             * Ram
             * @description RAM size in MB
             */
            ram?: number | null;
            /**
             * Original Name
             * @description Original flavor name
             */
            original_name?: string | null;
            /**
             * Vcpus
             * @description Number of vCPUs
             */
            vcpus?: number | null;
            /**
             * Extra Specs
             * @description Extra specs
             */
            extra_specs?: {
                [key: string]: unknown;
            } | null;
            /**
             * Swap
             * @description Swap size in MB
             */
            swap?: number | null;
            /**
             * Disk
             * @description Disk size in GB
             */
            disk?: number | null;
        };
        /** FlavorsResponse */
        FlavorsResponse: {
            /** Flavors */
            flavors: components["schemas"]["Flavor"][];
        };
        /** ForbiddenMessage */
        ForbiddenMessage: {
            /**
             * Detail
             * @description Detail message
             */
            detail: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** Image */
        Image: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Status */
            status: string;
            /** Visibility */
            visibility: string;
            /** Size */
            size: number;
            /** Disk Format */
            disk_format?: string | null;
            /** Owner */
            owner: string;
            /** Created At */
            created_at: string;
            /** Updated At */
            updated_at: string;
            /** Tags */
            tags: string[];
            /** Min Disk */
            min_disk: number;
            /** Min Ram */
            min_ram: number;
            /** Protected */
            protected: boolean;
        };
        /** ImagesResponse */
        ImagesResponse: {
            /** Images */
            images: components["schemas"]["Image"][];
        };
        /** InstanceCreate */
        InstanceCreate: {
            /** Image Id */
            image_id: string;
            /** Flavor Id */
            flavor_id: string;
            /** Key Name */
            key_name: string;
            /** Network Id */
            network_id: string;
        };
        /** InternalServerErrorMessage */
        InternalServerErrorMessage: {
            /**
             * Detail
             * @description Detail message
             */
            detail: string;
        };
        /** Keypair */
        Keypair: {
            /** Name */
            name: string;
            /** Fingerprint */
            fingerprint: string;
            /** Public Key */
            public_key: string;
            /** Type */
            type: string;
        };
        /** KeypairCreate */
        KeypairCreate: {
            /** Name */
            name: string;
            /** Public Key */
            public_key?: string | null;
        };
        /** KeypairDetail */
        KeypairDetail: {
            /** Name */
            name: string;
            /** Fingerprint */
            fingerprint: string;
            /** Public Key */
            public_key: string;
            /** Type */
            type: string;
            /** Private Key */
            private_key?: string | null;
        };
        /** KeypairsResponse */
        KeypairsResponse: {
            /** Keypairs */
            keypairs: components["schemas"]["Keypair"][];
        };
        /** KeystoneEndpoints */
        KeystoneEndpoints: {
            /**
             * Region Name
             * @description Region name
             */
            region_name: string;
            /**
             * Url
             * @description Endpoint URL
             */
            url: string;
        };
        /** LimitSummary */
        LimitSummary: {
            quotas: components["schemas"]["QuotaSet"];
        };
        /** LogoutBody */
        LogoutBody: {
            /** Keystone Token */
            keystone_token?: string | null;
            /** Region */
            region?: string | null;
        };
        /** Message */
        Message: {
            /**
             * Message
             * @description Message
             */
            message: string;
            /**
             * Code
             * @description Code
             * @default 200
             */
            code: number;
            /**
             * Title
             * @description Title
             * @default OK
             */
            title: string;
        };
        /** Metric */
        Metric: {
            /** Metric */
            metric: {
                [key: string]: string;
            };
            /** Value */
            value: unknown[];
        };
        /** NotFoundMessage */
        NotFoundMessage: {
            /**
             * Detail
             * @description Detail message
             */
            detail: string;
        };
        /** PerformanceData */
        PerformanceData: {
            /** Cpu Usage */
            cpu_usage: components["schemas"]["Metric"][];
            /** Memory Usage */
            memory_usage: components["schemas"]["Metric"][];
            /** Disk Read Bytes */
            disk_read_bytes: components["schemas"]["Metric"][];
            /** Disk Write Bytes */
            disk_write_bytes: components["schemas"]["Metric"][];
            /** Network Incoming Bytes */
            network_incoming_bytes: components["schemas"]["Metric"][];
            /** Network Outgoing Bytes */
            network_outgoing_bytes: components["schemas"]["Metric"][];
        };
        /** Policies */
        Policies: {
            /**
             * Policies
             * @description Policies list
             */
            policies: components["schemas"]["Policy"][];
        };
        /** PoliciesRules */
        PoliciesRules: {
            /**
             * Rules
             * @description Policies rules list
             */
            rules: string[];
            /**
             * Target
             * @description Policies targets
             */
            target?: {
                [key: string]: string;
            } | null;
        };
        /** Policy */
        Policy: {
            /**
             * Rule
             * @description Policy rule
             */
            rule: string;
            /**
             * Allowed
             * @description Policy allowed
             */
            allowed: boolean;
        };
        /**
         * PortDeviceOwner
         * @enum {string}
         */
        PortDeviceOwner: "" | "compute:nova" | "compute:kuryr" | "network:router_ha_interface" | "network:ha_router_replicated_interface" | "network:router_interface" | "network:router_gateway" | "network:floatingip" | "network:local_ip" | "network:dhcp" | "network:router_interface_distributed" | "network:floatingip_agent_gateway" | "network:router_centralized_snat" | "network:routed" | "network:distributed" | "Octavia";
        /** PortForwardRequest */
        PortForwardRequest: {
            /** Floating Ip Id */
            floating_ip_id: string;
            /** Internal Ip */
            internal_ip: string;
            /** Internal Port */
            internal_port: number;
            /** External Port */
            external_port: number;
            /**
             * Protocol
             * @default tcp
             */
            protocol: string;
        };
        /** PortForwardResponse */
        PortForwardResponse: {
            /** Floating Ip Address */
            floating_ip_address: string;
            /** Internal Ip Address */
            internal_ip_address: string;
            /** Internal Port */
            internal_port: number;
            /** External Port */
            external_port: number;
            /** Protocol */
            protocol: string;
            /** Status */
            status: string;
            /** Assigned Port */
            assigned_port: number;
            /** Public Ip */
            public_ip: string;
        };
        /** PortForwardingAdd */
        PortForwardingAdd: {
            /** Internal Ip */
            internal_ip: string;
            /** Internal Port */
            internal_port: number;
            /** External Port */
            external_port?: number | null;
            /**
             * Protocol
             * @default tcp
             */
            protocol: string;
        };
        /** PortForwardingDelete */
        PortForwardingDelete: {
            /** Floating Ip Id */
            floating_ip_id: string;
            /** Pf Id */
            pf_id: string;
        };
        /**
         * PortSortKey
         * @enum {string}
         */
        PortSortKey: "id" | "name" | "mac_address" | "status" | "project_id";
        /**
         * PortStatus
         * @enum {string}
         */
        PortStatus: "ACTIVE" | "DOWN" | "BUILD" | "ERROR" | "N/A";
        /** PortsResponse */
        PortsResponse: {
            /**
             * Ports
             * @description Ports list
             */
            ports: components["schemas"]["PortsResponseBase"][];
        };
        /** PortsResponseBase */
        PortsResponseBase: {
            /**
             * Id
             * @description Port ID
             */
            id: string;
            /**
             * Origin Data
             * @description The origin_data is the same like the response of https://docs.openstack.org/api-ref/network/v2/index.html?expanded=list-ports-detail#list-ports
             */
            origin_data: {
                [key: string]: unknown;
            };
            /**
             * Server Name
             * @description Server name
             */
            server_name?: string | null;
            /**
             * Network Name
             * @description Network name
             */
            network_name?: string | null;
            /**
             * Ipv4
             * @description IPv4 addresses
             */
            ipv4?: unknown[] | null;
            /**
             * Ipv6
             * @description IPv6 addresses
             */
            ipv6?: unknown[] | null;
            /**
             * Name
             * @deprecated
             * @description Will be removed, please use origin_data[name]
             */
            name: string | null;
            /**
             * Mac Address
             * @deprecated
             * @description Will be removed, please use origin_data[mac_address]
             */
            mac_address: string | null;
            /**
             * Project Id
             * @deprecated
             * @description Will be removed, please use origin_data[project_id]
             */
            project_id: string | null;
            /**
             * Device Owner
             * @deprecated
             * @description Will be removed, please use origin_data[device_owner]
             */
            device_owner: string | null;
            /**
             * Device Id
             * @deprecated
             * @description Will be removed, please use origin_data[device_id]
             */
            device_id: string | null;
            /**
             * Status
             * @deprecated
             * @description Will be removed, please use origin_data[status]
             */
            status: string | null;
            /**
             * Created At
             * @deprecated
             * @description Will be removed, please use origin_data[created_at]
             */
            created_at: string | null;
            /**
             * Network Id
             * @deprecated
             * @description Will be removed, please use origin_data[network_id]
             */
            network_id: string | null;
            /**
             * Binding Vnic Type
             * @deprecated
             * @description Will be removed, please use origin_data[binding:vnic_type]
             */
            binding_vnic_type: string | null;
            /**
             * Description
             * @deprecated
             * @description Will be removed, please use origin_data[description]
             */
            description: string | null;
            /**
             * Port Security Enabled
             * @deprecated
             * @description Will be removed, please use origin_data[port_security_enabled]
             */
            port_security_enabled: boolean | null;
            /**
             * Qos Policy Id
             * @deprecated
             * @description Will be removed, please use origin_data[qos_policy_id]
             */
            qos_policy_id: string | null;
            /**
             * Fixed Ips
             * @deprecated
             * @description Will be removed, please use origin_data[fixed_ips]
             */
            fixed_ips: unknown[] | null;
        };
        /** Profile */
        Profile: {
            /**
             * Keystone Token
             * @description Keystone token
             */
            keystone_token: string;
            /**
             * Region
             * @description User region
             */
            region: string;
            /**
             * Exp
             * @description Token expiration time
             */
            exp: number;
            /**
             * Uuid
             * @description UUID
             */
            uuid: string;
            /** @description User project */
            project: components["schemas"]["Project"];
            /** @description User */
            user: components["schemas"]["User"];
            /**
             * Roles
             * @description User roles
             */
            roles: components["schemas"]["Role"][];
            /**
             * Keystone Token Exp
             * @description Keystone token expiration time
             */
            keystone_token_exp: string;
            /**
             * Base Domains
             * @description User base domains
             */
            base_domains?: string[] | null;
            /**
             * Endpoints
             * @description Keystone endpoints
             */
            endpoints?: {
                [key: string]: unknown;
            } | null;
            /**
             * Projects
             * @description User projects
             */
            projects?: {
                [key: string]: unknown;
            } | null;
            /**
             * Default Project Id
             * @description User default project ID
             */
            default_project_id?: string | null;
            /**
             * Version
             * @description Version
             */
            version: string;
        };
        /** Project */
        Project: {
            /**
             * Id
             * @description Project ID
             */
            id: string;
            /**
             * Name
             * @description Project name
             */
            name: string;
            /** @description Project domain */
            domain: components["schemas"]["Domain"];
        };
        /** PrometheusQueryData */
        PrometheusQueryData: {
            /**
             * Resulttype
             * @description Prometheus result type
             */
            resultType: string;
            /**
             * Result
             * @description Prometheus query result
             */
            result: components["schemas"]["PrometheusQueryResult"][];
        };
        /** PrometheusQueryRangeData */
        PrometheusQueryRangeData: {
            /**
             * Resulttype
             * @description Prometheus result type
             */
            resultType: string;
            /**
             * Result
             * @description Prometheus query range result
             */
            result: components["schemas"]["PrometheusQueryRangeResult"][];
        };
        /** PrometheusQueryRangeResponse */
        PrometheusQueryRangeResponse: {
            /**
             * Status
             * @description Prometheus status
             */
            status: string;
            /**
             * Errortype
             * @description Prometheus error type
             */
            errorType?: string | null;
            /**
             * Error
             * @description Prometheus error
             */
            error?: string | null;
            /**
             * Warnings
             * @description Prometheus warnings
             */
            warnings?: string | null;
            /** @description Prometheus query range data */
            data?: components["schemas"]["PrometheusQueryRangeData"] | null;
        };
        /** PrometheusQueryRangeResult */
        PrometheusQueryRangeResult: {
            /**
             * Metric
             * @description Prometheus metric
             */
            metric: {
                [key: string]: string;
            };
            /**
             * Value
             * @description Prometheus metric value
             */
            value: unknown[];
        };
        /** PrometheusQueryResponse */
        PrometheusQueryResponse: {
            /**
             * Status
             * @description Prometheus status
             */
            status: string;
            /**
             * Errortype
             * @description Prometheus error type
             */
            errorType?: string | null;
            /**
             * Error
             * @description Prometheus error
             */
            error?: string | null;
            /**
             * Warnings
             * @description Prometheus warnings
             */
            warnings?: string | null;
            /** @description Prometheus query data */
            data?: components["schemas"]["PrometheusQueryData"] | null;
        };
        /** PrometheusQueryResult */
        PrometheusQueryResult: {
            /**
             * Metric
             * @description Prometheus metric
             */
            metric: {
                [key: string]: string;
            };
            /**
             * Value
             * @description Prometheus metric value
             */
            value: unknown[];
        };
        /** QuotaSet */
        QuotaSet: {
            instances: components["schemas"]["QuotaUsage"];
            cores: components["schemas"]["QuotaUsage"];
            ram: components["schemas"]["QuotaUsage"];
            volumes: components["schemas"]["QuotaUsage"];
            snapshots: components["schemas"]["QuotaUsage"];
            gigabytes: components["schemas"]["QuotaUsage"];
            floatingip: components["schemas"]["QuotaUsage"];
            network: components["schemas"]["QuotaUsage"];
            port: components["schemas"]["QuotaUsage"];
            router: components["schemas"]["QuotaUsage"];
            subnet: components["schemas"]["QuotaUsage"];
            security_group: components["schemas"]["QuotaUsage"];
            security_group_rule: components["schemas"]["QuotaUsage"];
            port_forwardings: components["schemas"]["QuotaUsage"];
        };
        /** QuotaUsage */
        QuotaUsage: {
            /** In Use */
            in_use: number;
            /** Limit */
            limit: number;
            /**
             * Reserved
             * @default 0
             */
            reserved: number | null;
        };
        /**
         * RecycleServerSortKey
         * @enum {string}
         */
        RecycleServerSortKey: "uuid" | "display_name" | "updated_at" | "project_id";
        /** RecycleServersResponse */
        RecycleServersResponse: {
            /**
             * Recycle Servers
             * @description Recycle servers list
             */
            recycle_servers: components["schemas"]["RecycleServersResponseBase"][];
        };
        /** RecycleServersResponseBase */
        RecycleServersResponseBase: {
            /**
             * Id
             * Format: uuid4
             * @description Recycle server id
             */
            id: string;
            /**
             * Origin Data
             * @description The origin_data is the same like the response of https://docs.openstack.org/api-ref/compute/?expanded=list-servers-detailed-detail#list-servers-detailed
             */
            origin_data: {
                [key: string]: unknown;
            };
            /**
             * Project Name
             * @description Project name
             */
            project_name?: string | null;
            /**
             * Image
             * @description Image id
             */
            image?: string | null;
            /**
             * Image Name
             * @description Image name
             */
            image_name?: string | null;
            /**
             * Image Os Distro
             * @description Image os distro
             */
            image_os_distro?: string | null;
            /**
             * Fixed Addresses
             * @description Fixed addresses
             */
            fixed_addresses?: unknown[] | null;
            /**
             * Floating Addresses
             * @description Floating addresses
             */
            floating_addresses?: unknown[] | null;
            /**
             * Deleted At
             * @description Deleted at
             */
            deleted_at?: string | null;
            /**
             * Updated At
             * @description Updated at
             */
            updated_at?: string | null;
            /**
             * Reclaim Timestamp
             * @description Reclaim timestamp
             */
            reclaim_timestamp: number;
            /**
             * Name
             * @deprecated
             * @description Will be removed, please use origin_data[name]
             */
            name: string | null;
            /**
             * Project Id
             * @deprecated
             * @description Will be removed, please use origin_data[tenant_id]
             */
            project_id: string | null;
            /**
             * Host
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-SRV-ATTR:host]
             */
            host: string | null;
            /**
             * Hostname
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-SRV-ATTR:hostname]
             */
            hostname: string | null;
            /**
             * Flavor
             * @deprecated
             * @description Will be removed, please use origin_data[flavor][original_name]
             */
            flavor: string | null;
            /**
             * @deprecated
             * @description Will be removed, please use origin_data[flavor]
             */
            flavor_info: components["schemas"]["FlavorInServer"] | null;
            /**
             * Status
             * @deprecated
             * @description Will be removed, please use origin_data[status]
             */
            status: string | null;
        };
        /** Role */
        Role: {
            /**
             * Id
             * @description Role ID
             */
            id: string;
            /**
             * Name
             * @description Role name
             */
            name: string;
        };
        /** SSO */
        SSO: {
            /** Enable Sso */
            enable_sso: boolean;
            /** Protocols */
            protocols: components["schemas"]["SSOInfo"][];
        };
        /** SSOInfo */
        SSOInfo: {
            /** Protocol */
            protocol: string;
            /** Url */
            url: string;
        };
        /**
         * ServerSortKey
         * @enum {string}
         */
        ServerSortKey: "uuid" | "display_name" | "vm_state" | "locked" | "created_at" | "host" | "project_id";
        /**
         * ServerStatus
         * @enum {string}
         */
        ServerStatus: "ACTIVE" | "BUILD" | "ERROR" | "HARD_REBOOT" | "MIGRATING" | "PAUSED" | "REBOOT" | "REBUILD" | "RESCUE" | "RESIZE" | "SHELVED" | "SHELVED_OFFLOADED" | "SHUTOFF" | "SOFT_DELETED" | "SUSPENDED" | "UNKNOWN";
        /** ServersResponse */
        ServersResponse: {
            /**
             * Servers
             * @description Servers list
             */
            servers: components["schemas"]["ServersResponseBase"][];
        };
        /** ServersResponseBase */
        ServersResponseBase: {
            /**
             * Id
             * Format: uuid4
             * @description Server ID
             */
            id: string;
            /**
             * Origin Data
             * @description The origin_data is the same like the response of https://docs.openstack.org/api-ref/compute/?expanded=list-servers-detailed-detail#list-servers-detailed
             */
            origin_data: {
                [key: string]: unknown;
            };
            /**
             * Project Name
             * @description Project name
             */
            project_name?: string | null;
            /**
             * Image
             * @description Image ID
             */
            image?: string | null;
            /**
             * Image Name
             * @description Image name
             */
            image_name?: string | null;
            /**
             * Image Os Distro
             * @description Image OS distro
             */
            image_os_distro?: string | null;
            /**
             * Fixed Addresses
             * @description Fixed addresses
             */
            fixed_addresses?: unknown[] | null;
            /**
             * Floating Addresses
             * @description Floating addresses
             */
            floating_addresses?: unknown[] | null;
            /**
             * Name
             * @deprecated
             * @description Will be removed, please use origin_data[name]
             */
            name: string | null;
            /**
             * Project Id
             * @deprecated
             * @description Will be removed, please use origin_data[tenant_id]
             */
            project_id: string | null;
            /**
             * Host
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-SRV-ATTR:host]
             */
            host: string | null;
            /**
             * Hostname
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-SRV-ATTR:hostname]
             */
            hostname: string | null;
            /**
             * Flavor
             * @deprecated
             * @description Will be removed, please use origin_data[flavor][original_name]
             */
            flavor: string | null;
            /**
             * @deprecated
             * @description Will be removed, please use origin_data[flavor]
             */
            flavor_info: components["schemas"]["FlavorInServer"] | null;
            /**
             * Status
             * @deprecated
             * @description Will be removed, please use origin_data[status]
             */
            status: string | null;
            /**
             * Locked
             * @deprecated
             * @description Will be removed, please use origin_data[locked]
             */
            locked: boolean | null;
            /**
             * Created At
             * @deprecated
             * @description Will be removed, please use origin_data[created]
             */
            created_at: string | null;
            /**
             * Task State
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-STS:task_state]
             */
            task_state: string | null;
            /**
             * Vm State
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-STS:vm_state]
             */
            vm_state: string | null;
            /**
             * Power State
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-STS:power_state]
             */
            power_state: number | null;
            /**
             * Root Device Name
             * @deprecated
             * @description Will be removed, please use origin_data[OS-EXT-SRV-ATTR:root_device_name]
             */
            root_device_name: string | null;
            /**
             * Metadata
             * @deprecated
             * @description Will be removed, please use origin_data[metadata]
             */
            metadata: {
                [key: string]: unknown;
            } | null;
        };
        /** Setting */
        Setting: {
            /**
             * Key
             * @description Key of setting
             */
            key: string;
            /**
             * Value
             * @description Value of setting
             */
            value: unknown;
            /**
             * Hidden
             * @description Hidden setting or not
             */
            hidden?: boolean | null;
            /**
             * Restart Service
             * @description Restart service or not to apply setting
             */
            restart_service: boolean;
        };
        /** Settings */
        Settings: {
            /**
             * Settings
             * @description Settings
             */
            settings: components["schemas"]["Setting"][];
        };
        /** SignupRequest */
        SignupRequest: {
            /** Username */
            username: string;
            /** Password */
            password: string;
            /** Name */
            name: string;
            /** Email */
            email: string;
            /** Student Id */
            student_id: string;
        };
        /**
         * SortDir
         * @enum {string}
         */
        SortDir: "desc" | "asc";
        /** UnauthorizedMessage */
        UnauthorizedMessage: {
            /**
             * Detail
             * @description Detail message
             */
            detail: string;
        };
        /** UpdateSetting */
        UpdateSetting: {
            /**
             * Key
             * @description Key of setting
             */
            key: string;
            /**
             * Value
             * @description Value of setting
             */
            value: unknown;
        };
        /** User */
        User: {
            /**
             * Id
             * @description User ID
             */
            id: string;
            /**
             * Name
             * @description User name
             */
            name: string;
            /** @description User domain */
            domain: components["schemas"]["Domain"];
            /**
             * Email
             * @description User email
             */
            email?: string | null;
            /**
             * Student Id
             * @description User student id
             */
            student_id?: string | null;
            /**
             * Description
             * @description User description
             */
            description?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VolumeAttachment */
        VolumeAttachment: {
            /**
             * Id
             * @description Volume attachment id
             */
            id: string;
            /**
             * Device
             * @description Device name
             */
            device?: string | null;
            /**
             * Server Id
             * @description Server id
             */
            server_id?: string | null;
            /**
             * Server Name
             * @description Server name
             */
            server_name?: string | null;
        };
        /** VolumeSnapshotChildVolume */
        VolumeSnapshotChildVolume: {
            /**
             * Volume Id
             * @description ID of volume
             * @example 00000000-0000-0000-0000-000000000000
             */
            volume_id?: string | null;
            /**
             * Volume Name
             * @description Name of volume
             * @example child-volume-demo
             */
            volume_name?: string | null;
        };
        /**
         * VolumeSnapshotSortKey
         * @enum {string}
         */
        VolumeSnapshotSortKey: "id" | "name" | "status" | "created_at";
        /**
         * VolumeSnapshotStatus
         * @enum {string}
         */
        VolumeSnapshotStatus: "CREATING" | "AVAILABLE" | "DELETING" | "ERROR" | "ERROR_DELETING";
        /** VolumeSnapshotsResponse */
        VolumeSnapshotsResponse: {
            /**
             * Count
             * @description Count of volume snapshots
             * @default 0
             */
            count: number | null;
            /**
             * Volume Snapshots
             * @description Volume snapshots list
             */
            volume_snapshots: components["schemas"]["VolumeSnapshotsResponseBase"][];
        };
        /** VolumeSnapshotsResponseBase */
        VolumeSnapshotsResponseBase: {
            /**
             * Id
             * @description Snapshot ID
             */
            id: string;
            /**
             * Origin Data
             * @description The origin_data is the same like the response of https://docs.openstack.org/api-ref/block-storage/v3/index.html?expanded=list-snapshots-and-details-detail#list-snapshots-and-details
             */
            origin_data: {
                [key: string]: unknown;
            };
            /**
             * Project Name
             * @description Project name
             */
            project_name?: string | null;
            /**
             * Host
             * @description Host name
             */
            host?: string | null;
            /**
             * Volume Name
             * @description Name of volume
             * @example volume-demo
             */
            volume_name?: string | null;
            /**
             * Child Volumes
             * @description Child volumes
             */
            child_volumes?: components["schemas"]["VolumeSnapshotChildVolume"][] | null;
            /**
             * Name
             * @deprecated
             * @description Will be removed, please use origin_data[name]
             */
            name: string | null;
            /**
             * Project Id
             * @deprecated
             * @description Will be removed, please use origin_data[os-extended-snapshot-attributes:project_id]
             */
            project_id: string | null;
            /**
             * Size
             * @deprecated
             * @description Will be removed, please use origin_data[size]
             */
            size: number | null;
            /**
             * Status
             * @deprecated
             * @description Will be removed, please use origin_data[status]
             */
            status: string | null;
            /**
             * Volume Id
             * @deprecated
             * @description Will be removed, please use origin_data[volume_id]
             */
            volume_id: string | null;
            /**
             * Created At
             * @deprecated
             * @description Will be removed, please use origin_data[created_at]
             */
            created_at: string | null;
            /**
             * Metadata
             * @deprecated
             * @description Will be removed, please use origin_data[metadata]
             */
            metadata: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * VolumeSortKey
         * @enum {string}
         */
        VolumeSortKey: "id" | "name" | "size" | "status" | "bootable" | "created_at";
        /**
         * VolumeStatus
         * @enum {string}
         */
        VolumeStatus: "creating" | "available" | "reserved" | "attaching" | "detaching" | "in-use" | "maintenance" | "deleting" | "awaiting-transfer" | "error" | "error_deleting" | "backing-up" | "restoring-backup" | "error_backing-up" | "error_restoring" | "error_extending" | "downloading" | "uploading" | "retyping" | "extending";
        /** VolumesResponse */
        VolumesResponse: {
            /**
             * Count
             * @description Count of volumes
             * @default 0
             */
            count: number | null;
            /**
             * Volumes
             * @description Volumes list
             */
            volumes: components["schemas"]["VolumesResponseBase"][];
        };
        /** VolumesResponseBase */
        VolumesResponseBase: {
            /**
             * Id
             * Format: uuid4
             * @description Volume ID
             */
            id: string;
            /**
             * Origin Data
             * @description The origin_data is the same like the response of https://docs.openstack.org/api-ref/block-storage/v3/index.html?expanded=list-accessible-volumes-with-details-detail#list-accessible-volumes-with-details
             */
            origin_data: {
                [key: string]: unknown;
            };
            /**
             * Project Name
             * @description Project name
             */
            project_name?: string | null;
            /**
             * Attachments
             * @description Volume attachments
             */
            attachments?: components["schemas"]["VolumeAttachment"][] | null;
            /**
             * Name
             * @deprecated
             * @description Will be removed, please use origin_data[name]
             */
            name: string | null;
            /**
             * Project Id
             * @deprecated
             * @description Will be removed, please use origin_data[os-vol-tenant-attr:tenant_id]
             */
            project_id: string | null;
            /**
             * Host
             * @deprecated
             * @description Will be removed, please use origin_data[os-vol-host-attr:host]
             */
            host: string | null;
            /**
             * Snapshot Id
             * @deprecated
             * @description Will be removed, please use origin_data[snapshot_id]
             */
            snapshot_id: string | null;
            /**
             * Source Volid
             * @deprecated
             * @description Will be removed, please use origin_data[source_volid]
             */
            source_volid: string | null;
            /**
             * Size
             * @deprecated
             * @description Will be removed, please use origin_data[size]
             */
            size: number | null;
            /**
             * Status
             * @deprecated
             * @description Will be removed, please use origin_data[status]
             */
            status: string | null;
            /**
             * Volume Type
             * @deprecated
             * @description Will be removed, please use origin_data[volume_type]
             */
            volume_type: string | null;
            /**
             * Encrypted
             * @deprecated
             * @description Will be removed, please use origin_data[encrypted]
             */
            encrypted: boolean | null;
            /**
             * Bootable
             * @deprecated
             * @description Will be removed, please use origin_data[bootable]
             */
            bootable: string | null;
            /**
             * Multiattach
             * @deprecated
             * @description Will be removed, please use origin_data[multiattach]
             */
            multiattach: boolean | null;
            /**
             * Availability Zone
             * @deprecated
             * @description Will be removed, please use origin_data[availability_zone]
             */
            availability_zone: string | null;
            /**
             * Created At
             * @deprecated
             * @description Will be removed, please use origin_data[created_at]
             */
            created_at: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_api_v1_login_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Credential"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sso_api_v1_sso_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SSO"];
                };
            };
        };
    };
    websso_api_v1_websso_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_websso_api_v1_websso_post"];
            };
        };
        responses: {
            /** @description Redirect to SSO provider */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_profile_api_v1_profile_get: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_v1_logout_post: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LogoutBody"] | null;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Message"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    switch_project_api_v1_switch_project__project_id__post: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path: {
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Profile"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_servers_api_v1_extension_servers_get: {
        parameters: {
            query?: {
                /** @description Requests a page size of items. Returns a number of items up to a limit value. */
                limit?: number | null;
                /** @description The ID of the last-seen item. */
                marker?: string | null;
                /** @description Indicates in which directions to sort. */
                sort_dirs?: components["schemas"]["SortDir"] | null;
                /** @description Indicates in which attributes to sort. Host is only used for admin role users */
                sort_keys?: components["schemas"]["ServerSortKey"][];
                /** @description List servers for all projects. */
                all_projects?: boolean | null;
                /** @description Filter the list of servers by the given project ID. Only works when the all_projects filter is also specified. */
                project_id?: string | null;
                /** @description Filter the list of servers by the given project name. Only works when the all_projects filter is also specified. */
                project_name?: string | null;
                /** @description Filter the list of servers by the given server name. Support fuzzy query. */
                name?: string | null;
                /** @description Filter the list of servers by the given server status. */
                status?: components["schemas"]["ServerStatus"] | null;
                /** @description Filter the list of servers by the given host. It will be ignored for non-admin user. */
                host?: string | null;
                /** @description Filter the list of servers by the given flavor ID. */
                flavor_id?: string;
                /** @description Filter the list of servers by the given server UUID. */
                uuid?: string;
                /** @description Filter the list of servers by the given IP address (only fixed, not floating). Also passed to Nova API if supported. */
                ip?: string | null;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServersResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestMessage"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_recycle_servers_api_v1_extension_recycle_servers_get: {
        parameters: {
            query?: {
                /** @description Requests a page size of items. Returns a number of items up to a limit value. */
                limit?: number | null;
                /** @description The ID of the last-seen item. */
                marker?: string | null;
                /** @description Indicates in which directions to sort. */
                sort_dirs?: components["schemas"]["SortDir"] | null;
                /** @description Indicates in which attributes to sort. Updated_at is used as deleted_at */
                sort_keys?: components["schemas"]["RecycleServerSortKey"][] | null;
                /** @description List recycle servers for all projects. */
                all_projects?: boolean | null;
                /** @description Filter the list of recycle servers by the given project ID. Only works when the all_projects filter is also specified. */
                project_id?: string | null;
                /** @description Filter the list of recycle servers by the given project name. Only works when the all_projects filter is also specified. */
                project_name?: string | null;
                /** @description Filter the list of recycle servers by the given server name. Support fuzzy query. */
                name?: string | null;
                /** @description Filter the list of recycle servers by the given recycle server UUID. */
                uuid?: string | null;
                /** @description Filter the list of recycle servers by the given IP address (only fixed, not floating). Also passed to Nova API if supported. */
                ip?: string | null;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecycleServersResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestMessage"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_volumes_api_v1_extension_volumes_get: {
        parameters: {
            query?: {
                /** @description Requests a page size of items. Returns a number of items up to a limit value. */
                limit?: number | null;
                /** @description The ID of the last-seen item. */
                marker?: string | null;
                /** @description Indicates in which directions to sort. */
                sort_dirs?: components["schemas"]["SortDir"] | null;
                /** @description Indicates in which attributes to sort. Updated_at is used as deleted_at */
                sort_keys?: components["schemas"]["VolumeSortKey"][] | null;
                /** @description List volumes for all projects. */
                all_projects?: boolean | null;
                /** @description Filter the list of volumes by the given project ID. */
                project_id?: string | null;
                /** @description Filter the list of volumes by the given server name. */
                name?: string | null;
                /** @description Filter the list of volumes by the given multiattach. */
                multiattach?: boolean | null;
                /** @description Filter the list of volumes by the given status. */
                status?: components["schemas"]["VolumeStatus"] | null;
                /** @description Filter the list of volumes by the given bootable. */
                bootable?: boolean | null;
                /** @description Filter the list of volumes by the given volumes UUID. */
                uuid?: string[] | null;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VolumesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_volume_snapshots_api_v1_extension_volume_snapshots_get: {
        parameters: {
            query?: {
                /** @description Requests a page size of items. Return items up to the limit value. */
                limit?: number | null;
                /** @description The ID of the last-seen item. */
                marker?: string | null;
                /** @description Indicates in which directions to sort. */
                sort_dirs?: components["schemas"]["SortDir"] | null;
                /** @description Indicates in which attributes to sort. */
                sort_keys?: components["schemas"]["VolumeSnapshotSortKey"][] | null;
                /** @description List snapshots for all projects. */
                all_projects?: boolean | null;
                /** @description Filter the list of snapshots by the given project ID. */
                project_id?: string | null;
                /** @description Filter the list of snapshots by the given snapshot name. */
                name?: string | null;
                /** @description Filter the list of snapshots by the given snapshot status. */
                status?: components["schemas"]["VolumeSnapshotStatus"] | null;
                /** @description Filter the list of snapshots by the given volume ID. */
                volume_id?: string | null;
                /** @description Filter the list of snapshots by the given snapshot UUID. */
                uuid?: string | null;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VolumeSnapshotsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_ports_api_v1_extension_ports_get: {
        parameters: {
            query?: {
                /** @description Requests a page size of items. Returns a number of items up to a limit value. */
                limit?: number | null;
                /** @description The ID of the last-seen item. */
                marker?: string | null;
                /** @description Indicates in which directions to sort. */
                sort_dirs?: components["schemas"]["SortDir"] | null;
                /** @description Indicates in which attributes to sort. */
                sort_keys?: components["schemas"]["PortSortKey"][] | null;
                /** @description List ports for all projects. */
                all_projects?: boolean | null;
                /** @description Filter the list of ports by the given project ID. */
                project_id?: string | null;
                /** @description Filter the list of ports by the given port name. */
                name?: string | null;
                /** @description Filter the list of ports by the given port status. */
                status?: components["schemas"]["PortStatus"] | null;
                /** @description Filter the list of ports by the given network name. */
                network_name?: string | null;
                /** @description Filter the list of ports by the given network ID. */
                network_id?: string | null;
                /** @description The ID of the device that uses this port. For example, a server instance or a logical router. */
                device_id?: string | null;
                /** @description The entity type that uses this port. */
                device_owner?: components["schemas"]["PortDeviceOwner"][] | null;
                /** @description Filter the list of ports by the given port UUID. */
                uuid?: string[] | null;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PortsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    compute_services_api_v1_extension_compute_services_get: {
        parameters: {
            query?: {
                /** @description Filter the list of compute services by the given binary. */
                binary?: string;
                /** @description Filter the list of compute services by the given host. */
                host?: string;
            };
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ComputeServicesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    prometheus_query_api_v1_query_get: {
        parameters: {
            query?: {
                /** @description The query expression of prometheus to filter. */
                query?: string;
                /** @description The time to filter. */
                time?: string;
                /** @description The timeout to filter. */
                timeout?: string;
            };
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrometheusQueryResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    prometheus_query_range_api_v1_query_range_get: {
        parameters: {
            query?: {
                /** @description The query expression of prometheus to filter. */
                query?: string;
                /** @description The start time to filter. */
                start?: string;
                /** @description The end time to filter. */
                end?: string;
                /** @description The step to filter. */
                step?: string;
                /** @description The timeout to filter. */
                timeout?: string;
            };
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrometheusQueryRangeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_keystone_endpoints_api_v1_contrib_keystone_endpoints_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeystoneEndpoints"][];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_domains_api_v1_contrib_domains_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_regions_api_v1_contrib_regions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    list_policies_api_v1_policies_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policies"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    check_policies_api_v1_policies_check_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PoliciesRules"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Policies"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorMessage"];
                };
            };
        };
    };
    show_setting_api_v1_setting__key__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_setting_api_v1_setting__key__delete: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_setting_api_v1_setting_put: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSetting"];
            };
        };
        responses: {
            /** @description ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Setting"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenMessage"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_settings_api_v1_settings_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnauthorizedMessage"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    signup_api_v1_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    portforward_api_v1_portforward_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PortForwardRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PortForwardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_instance_api_v1_instances_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstanceCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_port_forwarding_api_v1_port_forwardings_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PortForwardingAdd"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_port_forwarding_api_v1_port_forwardings_delete: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PortForwardingDelete"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_instance_console_api_v1_instances__instance_id__console_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConsoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Console"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_images_api_v1_images_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImagesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_flavors_api_v1_flavors_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FlavorsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flavor_api_v1_flavors__flavor_id__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                flavor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flavor"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_keypairs_api_v1_keypairs_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeypairsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_keypair_api_v1_keypairs_post: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["KeypairCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KeypairDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_keypair_api_v1_keypairs__keypair_name__get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                keypair_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Keypair"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_keypair_api_v1_keypairs__keypair_name__delete: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                keypair_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_limit_summary_api_v1_limits_get: {
        parameters: {
            query?: never;
            header?: {
                "X-Openstack-Request-Id"?: string | null;
                Authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitSummary"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_instance_performance_api_v1_instances__instance_id__performance_get: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string | null;
            };
            path: {
                instance_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PerformanceData"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
